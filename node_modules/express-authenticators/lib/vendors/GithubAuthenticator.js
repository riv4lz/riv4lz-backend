"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchGithubProfile = void 0;
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const fetchGithubProfile = ({ access_token }) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield (0, node_fetch_1.default)('https://api.github.com/user', {
        headers: {
            Authorization: `token ${access_token}`,
            Accept: 'application/json',
        }
    });
    if (!res.ok)
        throw new OAuthCommon_1.OAuthProfileError(yield res.text());
    const emailRes = yield (0, node_fetch_1.default)('https://api.github.com/user/emails', {
        headers: {
            Authorization: `token ${access_token}`,
            Accept: 'application/json',
        }
    });
    let emails;
    if (emailRes.ok)
        emails = yield emailRes.json();
    const getEmail = () => {
        for (const emailFilter of [
            (meta) => (meta === null || meta === void 0 ? void 0 : meta.primary) && (meta === null || meta === void 0 ? void 0 : meta.verified),
            (meta) => meta === null || meta === void 0 ? void 0 : meta.verified,
            (meta) => meta === null || meta === void 0 ? void 0 : meta.primary,
            (meta) => (meta === null || meta === void 0 ? void 0 : meta.visibility) === 'public',
            () => true,
        ])
            for (const emailData of emails || [])
                if ((emailData === null || emailData === void 0 ? void 0 : emailData.email) && emailFilter(emailData))
                    return {
                        email: emailData.email,
                        emailVerified: emailData.verified
                    };
    };
    const profile = yield res.json();
    if (!profile.id)
        throw new OAuthCommon_1.OAuthProfileError('Invalid Github profile ID');
    return Object.assign(Object.assign({ id: profile.id, first: profile.name, last: '', avatar: profile.avatar_url }, getEmail()), { raw: profile });
});
exports.fetchGithubProfile = fetchGithubProfile;
class GithubAuthenticator extends OAuth2_1.default {
    constructor(options) {
        super(Object.assign({ consentURL: 'https://github.com/login/oauth/authorize', tokenURL: 'https://github.com/login/oauth/access_token', scope: [
                'read:user',
                'user:email'
            ].join(' ') }, options), {
            ignoreGrantType: true,
            tokenRequestMethod: "POST" /* POST */,
            includeStateInAccessToken: true,
            enablePKCE: false,
        });
        this.fetchProfile = exports.fetchGithubProfile;
    }
}
exports.default = GithubAuthenticator;
