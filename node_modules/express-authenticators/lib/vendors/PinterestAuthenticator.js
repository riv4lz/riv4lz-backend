"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const fetchPinterestProfile = ({ data: { access_token } }) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield (0, node_fetch_1.default)('https://api.pinterest.com/v3/users/me', {
        headers: {
            Authorization: `Bearer ${access_token}`
        }
    });
    if (!res.ok)
        throw new OAuthCommon_1.OAuthProfileError(yield res.text());
    const { data: profile } = yield res.json();
    // Pinterest does not include response shape in document
    // https://developers.pinterest.com/docs/redoc/martech/#operation/v3_get_user_handler_GET
    if (!profile.id)
        throw new OAuthCommon_1.OAuthProfileError('Invalid Pinterest profile');
    return {
        id: profile.id,
        first: profile.first_name,
        last: profile.last_name,
        raw: profile
    };
});
class PinterestAuthenticator extends OAuth2_1.default {
    constructor(options) {
        super(Object.assign({ consentURL: 'https://www.pinterest.com/oauth', tokenURL: 'https://api.pinterest.com/v3/oauth/access_token', scope: 'read_users' }, options), {
            ignoreGrantType: false,
            tokenRequestMethod: "PUT" /* PUT */,
            includeStateInAccessToken: false,
            enablePKCE: false,
        });
        this.fetchProfile = fetchPinterestProfile;
    }
}
exports.default = PinterestAuthenticator;
