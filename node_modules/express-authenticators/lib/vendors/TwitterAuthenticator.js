"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth_1 = __importDefault(require("../oauth/OAuth"));
const oauthUtils_1 = require("../oauth/oauthUtils");
const OAuthCommon_1 = require("../OAuthCommon");
class TwitterAuthenticator extends OAuth_1.default {
    constructor(config) {
        super({
            consumerKey: config.clientID,
            consumerSecret: config.clientSecret,
            callbackUrl: config.redirectUri,
            requestTokenUrl: 'https://api.twitter.com/oauth/request_token',
            accessTokenUrl: 'https://api.twitter.com/oauth/access_token',
            authorizeUrl: 'https://api.twitter.com/oauth/authorize',
            signingMethod: oauthUtils_1.OAuthSigningMethod.Hmac,
        });
    }
    fetchProfile(tokenPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.signAndFetch('https://api.twitter.com/1.1/account/verify_credentials.json', {
                qs: { include_email: 'true' },
            }, tokenPayload);
            if (!response.ok)
                throw new OAuthCommon_1.OAuthProfileError(yield response.text());
            const profile = yield response.json();
            if (!profile.id_str)
                throw new OAuthCommon_1.OAuthProfileError('Invalid Twitter profile ID');
            return {
                id: profile.id_str,
                raw: profile,
                avatar: profile.profile_image_url_https
                    || profile.profile_image_url
                    || profile.profile_background_image_url_https
                    || profile.profile_background_image_url,
                first: profile.name || profile.screen_name,
                email: profile.email,
                emailVerified: !!profile.email,
                /**
                 * from twitter docs
                 * https://developer.twitter.com/en/docs/accounts-and-users
                 * /manage-account-settings/api-reference/get-account-verify_credentials
                 * When set to true email will be returned in the user objects as a string.
                 * If the user does not have an email address on their account,
                 * or if the email address is not verified, null will be returned.
                 */
            };
        });
    }
}
exports.default = TwitterAuthenticator;
