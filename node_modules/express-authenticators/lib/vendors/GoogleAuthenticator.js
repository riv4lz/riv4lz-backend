"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const url_1 = require("url");
const profilePictureSize = 1024;
const fetchGoogleProfile = ({ access_token }, fields = [
    'emailAddresses',
    'names',
    'nicknames',
    'photos',
    'urls',
]) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const res = yield (0, node_fetch_1.default)(`https://people.googleapis.com/v1/people/me?${new url_1.URLSearchParams({
        access_token,
        personFields: fields.join(',')
    }).toString()}`);
    if (!res.ok)
        throw new OAuthCommon_1.OAuthProfileError(yield res.text());
    const profile = yield res.json();
    if (!((_a = profile.resourceName) === null || _a === void 0 ? void 0 : _a.startsWith('people/')))
        throw new OAuthCommon_1.OAuthProfileError('Invalid response from Google People API');
    const id = profile.resourceName.substr('people/'.length);
    if (!id)
        throw new OAuthCommon_1.OAuthProfileError('Invalid Google profile ID');
    const getEmail = () => {
        var _a;
        for (const metaFilter of [
            (meta) => (meta === null || meta === void 0 ? void 0 : meta.primary) && (meta === null || meta === void 0 ? void 0 : meta.verified),
            (meta) => meta === null || meta === void 0 ? void 0 : meta.verified,
            (meta) => meta === null || meta === void 0 ? void 0 : meta.primary,
            () => true,
        ])
            for (const email of profile.emailAddresses || [])
                if ((email === null || email === void 0 ? void 0 : email.value) && metaFilter(email.metadata))
                    return {
                        email: email.value,
                        emailVerified: ((_a = email.metadata) === null || _a === void 0 ? void 0 : _a.verified) || false
                    };
    };
    const primaryMetaFilters = [
        (meta) => meta === null || meta === void 0 ? void 0 : meta.primary,
        () => true
    ];
    const getAvatar = () => {
        for (const metaFilter of primaryMetaFilters)
            for (const photo of profile.photos || [])
                if (photo.url && metaFilter(photo.metadata))
                    return photo.url.replace(/=s100$/, `=s${profilePictureSize}`);
    };
    const getFirstLast = () => {
        for (const metaFilter of primaryMetaFilters)
            for (const name of profile.names || [])
                if (metaFilter(name.metadata))
                    return {
                        first: name.givenName,
                        last: name.familyName
                    };
        for (const metaFilter of primaryMetaFilters)
            for (const nickname of profile.nicknames || [])
                if (nickname.value && metaFilter(nickname.metadata))
                    return {
                        first: nickname.value,
                    };
    };
    return Object.assign(Object.assign(Object.assign(Object.assign({ id }, getEmail()), { avatar: getAvatar() }), getFirstLast()), { raw: profile });
});
class GoogleAuthenticator extends OAuth2_1.default {
    constructor(childConfig) {
        super(Object.assign({ consentURL: 'https://accounts.google.com/o/oauth2/v2/auth', tokenURL: 'https://oauth2.googleapis.com/token', scope: [
                'https://www.googleapis.com/auth/userinfo.email',
                'https://www.googleapis.com/auth/userinfo.profile'
            ].join(' ') }, childConfig), {
            ignoreGrantType: false,
            tokenRequestMethod: "POST" /* POST */,
            includeStateInAccessToken: false,
            enablePKCE: true,
        });
        this.childConfig = childConfig;
        this.fetchProfile = fetchGoogleProfile;
    }
    refreshAccessToken(refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield (0, node_fetch_1.default)('https://oauth2.googleapis.com/token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    Accept: 'application/json',
                },
                body: new url_1.URLSearchParams({
                    client_id: this.childConfig.clientID,
                    client_secret: this.childConfig.clientSecret,
                    grant_type: 'refresh_token',
                    refresh_token: refreshToken
                }).toString()
            });
            return yield response.json();
        });
    }
}
exports.default = GoogleAuthenticator;
