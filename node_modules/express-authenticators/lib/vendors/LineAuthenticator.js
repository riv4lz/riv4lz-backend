"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const url_1 = require("url");
class GoogleAuthenticator extends OAuth2_1.default {
    constructor(childConfig) {
        super(Object.assign({ consentURL: 'https://access.line.me/oauth2/v2.1/authorize', tokenURL: 'https://api.line.me/oauth2/v2.1/token', scope: [
                'profile',
                'openid',
                'openid%20email' // exclude this scope if app is not permitted to access user email
            ].join(' ') }, childConfig), {
            ignoreGrantType: false,
            tokenRequestMethod: "POST" /* POST */,
            includeStateInAccessToken: false,
            enablePKCE: true,
        });
        this.childConfig = childConfig;
    }
    fetchProfile({ access_token, id_token }, ignoreEmail) {
        return __awaiter(this, void 0, void 0, function* () {
            // id_token can be decoded with jwt.verify() and jwt.decode.
            // However, we don't want to add a new `jwt` dependency. Also, we need to pass channel_secret to verify.
            // verify key = channel_secret, audience = channel_id, issuer = 'https://access.line.me', algorithms = ['HS256]
            let email;
            if (!ignoreEmail) {
                const res = yield (0, node_fetch_1.default)('https://api.line.me/oauth2/v2.1/verify', {
                    method: 'POST',
                    body: new url_1.URLSearchParams({
                        id_token,
                        client_id: this.childConfig.clientID
                    }).toString(),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        Accept: 'application/json',
                    },
                });
                if (!res.ok)
                    throw new OAuthCommon_1.OAuthProfileError(yield res.text());
                email = (yield res.json()).email; // 'name', 'picture' might be included if appropriate scopes included.
            }
            const res = yield (0, node_fetch_1.default)('https://api.line.me/v2/profile', {
                headers: {
                    Authorization: `Bearer ${access_token}`
                }
            });
            if (!res.ok)
                throw new OAuthCommon_1.OAuthProfileError(yield res.text());
            const profile = yield res.json();
            const { userId, displayName, pictureUrl, // can be undefined
            // statusMessage
             } = profile;
            const [first, ...rest] = (displayName === null || displayName === void 0 ? void 0 : displayName.split(' ')) || [];
            return {
                email,
                id: userId,
                avatar: pictureUrl && `${pictureUrl}/large`,
                first,
                last: rest === null || rest === void 0 ? void 0 : rest.join(' '),
                raw: profile
            };
        });
    }
    refreshAccessToken(refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield (0, node_fetch_1.default)('https://api.line.me/oauth2/v2.1/token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    Accept: 'application/json',
                },
                body: new url_1.URLSearchParams({
                    client_id: this.childConfig.clientID,
                    client_secret: this.childConfig.clientSecret,
                    grant_type: 'refresh_token',
                    refresh_token: refreshToken
                }).toString()
            });
            return yield response.json();
        });
    }
}
exports.default = GoogleAuthenticator;
