"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const fetchLinkedInProfile = ({ access_token }) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield (0, node_fetch_1.default)(`https://api.linkedin.com/v2/me?projection=(${[
        'id',
        'profilePicture(displayImage~:playableStreams)',
        'firstName',
        'lastName',
        'localizedFirstName',
        'localizedLastName',
    ].join(',')})`, {
        headers: {
            Authorization: `Bearer ${access_token}`,
            Accept: 'application/json',
        }
    });
    if (!res.ok)
        throw new OAuthCommon_1.OAuthProfileError(yield res.text());
    const profile = yield res.json();
    if (!profile.id)
        throw new OAuthCommon_1.OAuthProfileError('Invalid LinkedIn profile ID');
    return {
        id: profile.id,
        first: profile.localizedFirstName,
        last: profile.localizedLastName,
        raw: profile
    };
});
class LinkedInAuthenticator extends OAuth2_1.default {
    constructor(options) {
        super(Object.assign({ consentURL: 'https://www.linkedin.com/oauth/v2/authorization', tokenURL: 'https://www.linkedin.com/oauth/v2/accessToken', scope: [
                'r_emailaddress',
                'r_liteprofile',
                // 'w_member_social'
            ].join(' ') }, options), {
            ignoreGrantType: false,
            tokenRequestMethod: "POST" /* POST */,
            includeStateInAccessToken: true,
            enablePKCE: false,
        });
        this.fetchProfile = fetchLinkedInProfile;
    }
}
exports.default = LinkedInAuthenticator;
