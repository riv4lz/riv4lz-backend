"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const url_1 = require("url");
const fetchFoursquareProfile = ({ access_token }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    const res = yield (0, node_fetch_1.default)(`https://api.foursquare.com/v2/users/self?${new url_1.URLSearchParams({
        oauth_token: access_token,
        v: '20200408'
    }).toString()}`);
    if (!res.ok)
        throw new OAuthCommon_1.OAuthProfileError(yield res.text());
    const profile = yield res.json();
    if (!((_b = (_a = profile === null || profile === void 0 ? void 0 : profile.response) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id))
        throw new OAuthCommon_1.OAuthProfileError('Invalid Foursquare profile ID');
    return {
        id: profile.response.user.id,
        first: profile.response.user.firstName,
        last: profile.response.user.lastName,
        email: ((_c = profile.response.user.contact) === null || _c === void 0 ? void 0 : _c.email) || undefined,
        emailVerified: false,
        avatar: ((_d = profile.response.user.photo) === null || _d === void 0 ? void 0 : _d.prefix)
            ? `${(_e = profile.response.user.photo) === null || _e === void 0 ? void 0 : _e.prefix}original${(_f = profile.response.user.photo) === null || _f === void 0 ? void 0 : _f.suffix}`
            : '',
        raw: profile
    };
});
class FoursquareAuthenticator extends OAuth2_1.default {
    constructor(options) {
        super(Object.assign({ consentURL: 'https://foursquare.com/oauth2/authenticate', tokenURL: 'https://foursquare.com/oauth2/access_token' }, options), {
            ignoreGrantType: false,
            tokenRequestMethod: "GET" /* GET */,
            includeStateInAccessToken: false,
            enablePKCE: false,
        });
        this.fetchProfile = fetchFoursquareProfile;
    }
}
exports.default = FoursquareAuthenticator;
