"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const url_1 = require("url");
const profilePictureWidth = 1024; //px
const fetchFacebookProfile = ({ access_token }, fields = [
    'first_name',
    'middle_name',
    'last_name',
    'email',
    'picture',
    'id',
    'name'
]) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield (0, node_fetch_1.default)(`https://graph.facebook.com/v9.0/me?${new url_1.URLSearchParams({
        access_token,
        fields: fields.join(',')
    }).toString()}`);
    if (!res.ok)
        throw new OAuthCommon_1.OAuthProfileError(yield res.text());
    const profile = yield res.json();
    if (!profile.id)
        throw new OAuthCommon_1.OAuthProfileError('Invalid Facebook profile ID');
    return {
        id: profile.id,
        first: profile.first_name,
        last: profile.last_name,
        email: profile.email,
        emailVerified: !!profile.email,
        avatar: `https://graph.facebook.com/v9.0/${profile.id}/picture?width=${profilePictureWidth}`,
        raw: profile
    };
});
class FacebookAuthenticator extends OAuth2_1.default {
    constructor(options) {
        super(Object.assign({ consentURL: 'https://www.facebook.com/v9.0/dialog/oauth', tokenURL: 'https://graph.facebook.com/v9.0/oauth/access_token', scope: ['email'].join(',') }, options), {
            ignoreGrantType: true,
            tokenRequestMethod: "GET" /* GET */,
            includeStateInAccessToken: false,
            enablePKCE: false,
        });
        this.fetchProfile = fetchFacebookProfile;
    }
}
exports.default = FacebookAuthenticator;
