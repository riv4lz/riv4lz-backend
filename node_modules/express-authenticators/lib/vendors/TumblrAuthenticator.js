"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth_1 = __importDefault(require("../oauth/OAuth"));
const oauthUtils_1 = require("../oauth/oauthUtils");
const OAuthCommon_1 = require("../OAuthCommon");
class TumblrAuthenticator extends OAuth_1.default {
    constructor(config) {
        super({
            consumerKey: config.clientID,
            consumerSecret: config.clientSecret,
            callbackUrl: config.redirectUri,
            requestTokenUrl: 'https://www.tumblr.com/oauth/request_token',
            accessTokenUrl: 'https://www.tumblr.com/oauth/access_token',
            authorizeUrl: 'https://www.tumblr.com/oauth/authorize',
            signingMethod: oauthUtils_1.OAuthSigningMethod.Hmac,
        });
    }
    fetchProfile(tokenPayload) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.signAndFetch('https://api.tumblr.com/v2/user/info', {}, tokenPayload);
            if (!response.ok)
                throw new OAuthCommon_1.OAuthProfileError(yield response.text());
            const profile = yield response.json();
            let blogProfile;
            if ((_b = (_a = profile === null || profile === void 0 ? void 0 : profile.response) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.name) {
                const blogResponse = yield this.signAndFetch(`https://api.tumblr.com/v2/blog/${profile.response.user.name}.tumblr.com/info`, {}, tokenPayload);
                if (blogResponse.ok) {
                    blogProfile = yield blogResponse.json();
                }
            }
            return {
                id: (_d = (_c = blogProfile === null || blogProfile === void 0 ? void 0 : blogProfile.response) === null || _c === void 0 ? void 0 : _c.blog) === null || _d === void 0 ? void 0 : _d.uuid,
                first: (_f = (_e = blogProfile === null || blogProfile === void 0 ? void 0 : blogProfile.response) === null || _e === void 0 ? void 0 : _e.blog) === null || _f === void 0 ? void 0 : _f.title,
                avatar: (_k = (_j = (_h = (_g = blogProfile === null || blogProfile === void 0 ? void 0 : blogProfile.response) === null || _g === void 0 ? void 0 : _g.blog) === null || _h === void 0 ? void 0 : _h.avatar) === null || _j === void 0 ? void 0 : _j[0]) === null || _k === void 0 ? void 0 : _k.url,
                raw: {
                    profile,
                    blogProfile
                },
            };
        });
    }
}
exports.default = TumblrAuthenticator;
