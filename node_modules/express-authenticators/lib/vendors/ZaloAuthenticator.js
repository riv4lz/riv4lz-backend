"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2_1 = __importDefault(require("../oauth2/OAuth2"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuthCommon_1 = require("../OAuthCommon");
const url_1 = require("url");
const fetchZaloProfile = ({ access_token }, fields = [
    'name',
    'id',
    'picture',
    'error',
    'message'
]) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const res = yield (0, node_fetch_1.default)(`https://graph.zalo.me/v2.0/me?${new url_1.URLSearchParams({
        access_token,
        fields: fields.join(',')
    }).toString()}`, {
        headers: {
            access_token
        }
    });
    if (!res.ok)
        throw new OAuthCommon_1.OAuthProfileError(yield res.text());
    const profile = yield res.json();
    if (!profile.id)
        throw new OAuthCommon_1.OAuthProfileError('Invalid Zalo profile ID');
    if (profile.error)
        throw new OAuthCommon_1.OAuthProfileError(`Zalo error: ${profile.message}`);
    return {
        id: profile.id,
        first: profile.name,
        avatar: (_b = (_a = profile.picture) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.url,
        raw: profile
    };
});
class ZaloAuthenticator extends OAuth2_1.default {
    constructor(childConfig) {
        super(Object.assign({ consentURL: 'https://oauth.zaloapp.com/v4/permission', tokenURL: 'https://oauth.zaloapp.com/v4/access_token' }, childConfig), {
            ignoreGrantType: false,
            tokenRequestMethod: "POST" /* POST */,
            includeStateInAccessToken: false,
            enablePKCE: true,
            clientIDQueryName: 'app_id',
            secretHeaderName: 'secret_key',
        });
        this.childConfig = childConfig;
        this.fetchProfile = fetchZaloProfile;
    }
    refreshAccessToken(refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield (0, node_fetch_1.default)('https://oauth.zaloapp.com/v4/access_token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    Accept: 'application/json',
                    secret_key: this.childConfig.clientSecret
                },
                body: new url_1.URLSearchParams({
                    app_id: this.childConfig.clientID,
                    grant_type: 'refresh_token',
                    refresh_token: refreshToken
                }).toString()
            });
            return yield response.json();
        });
    }
}
exports.default = ZaloAuthenticator;
