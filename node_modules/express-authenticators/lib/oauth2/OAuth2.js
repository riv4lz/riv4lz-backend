"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _OAuth2_instances, _OAuth2_clientIDQueryName_get;
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line import/no-unresolved
const node_fetch_1 = __importDefault(require("node-fetch"));
const OAuth2Error_1 = __importDefault(require("./OAuth2Error"));
const crypto_1 = __importStar(require("crypto"));
const lib_1 = require("../lib");
const url_1 = require("url");
class OAuth2 {
    // eslint-disable-next-line no-useless-constructor
    constructor(config, options) {
        this.config = config;
        this.options = options;
        _OAuth2_instances.add(this);
    }
    callback({ pop }, rawQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const { state: sessionState, verifier } = (0, lib_1.decodeSessionData)(pop());
            const query = new url_1.URLSearchParams(rawQuery);
            const state = query.get('state');
            if (state !== sessionState)
                throw new OAuth2Error_1.default('Invalid returning state');
            if (query.get('error_code')
                || query.get('error')
                || query.get('error_description')
                || query.get('error_message')
                || query.get('error_reason')) {
                const error = new OAuth2Error_1.default((query.get('error_message')
                    || query.get('error_description')
                    || query.get('error_reason')
                    || query.get('error')
                    || 'Unknown OAuth2 error'));
                error.code = query.get('error_code');
                throw error;
            }
            const code = query.get('code');
            const body = new url_1.URLSearchParams(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ [__classPrivateFieldGet(this, _OAuth2_instances, "a", _OAuth2_clientIDQueryName_get)]: this.config.clientID, redirect_uri: this.config.redirectUri }, !this.options.secretHeaderName && {
                client_secret: this.config.clientSecret
            }), code && { code }), !this.options.ignoreGrantType && { grant_type: 'authorization_code' }), this.options.includeStateInAccessToken && state && { state }), this.options.enablePKCE && { code_verifier: verifier })).toString();
            const res = this.options.tokenRequestMethod === "GET" /* GET */
                ? yield (0, node_fetch_1.default)(`${this.config.tokenURL}?${body}`)
                : yield (0, node_fetch_1.default)(this.config.tokenURL, {
                    method: 'POST',
                    headers: Object.assign({ 'Content-Type': 'application/x-www-form-urlencoded', Accept: 'application/json' }, this.options.secretHeaderName && {
                        [this.options.secretHeaderName]: this.config.clientSecret
                    }),
                    body
                });
            if (!res.ok)
                throw new OAuth2Error_1.default((yield res.text()) || 'Cannot get access token');
            let json;
            try {
                json = yield res.json();
            }
            catch (err) {
                throw new OAuth2Error_1.default(err.message);
            }
            // const {access_token, token_type, expires_in, refresh_token} = json
            if (!json.access_token)
                throw new OAuth2Error_1.default('Token not found');
            return json;
        });
    }
    authenticate({ store }) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = (0, crypto_1.randomUUID)();
            // https://datatracker.ietf.org/doc/html/rfc7636#section-4.1
            // rfc7636 requires key length between 43-128
            // while v4's generated key has 36 char
            const verifier = `${(0, crypto_1.randomUUID)()}-${(0, crypto_1.randomUUID)()}`;
            yield store((0, lib_1.encodeSessionData)({
                state,
                verifier
            }));
            return `${this.config.consentURL}?\
${new url_1.URLSearchParams(Object.assign(Object.assign(Object.assign({ [__classPrivateFieldGet(this, _OAuth2_instances, "a", _OAuth2_clientIDQueryName_get)]: this.config.clientID, redirect_uri: this.config.redirectUri, state }, this.config.scope && { scope: this.config.scope }), { response_type: 'code' }), this.options.enablePKCE && {
                code_challenge: crypto_1.default
                    .createHash('sha256')
                    .update(Buffer.from(verifier))
                    .digest()
                    .toString('base64')
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=/g, ''),
                code_challenge_method: 'S256'
            })).toString()}`;
        });
    }
}
exports.default = OAuth2;
_OAuth2_instances = new WeakSet(), _OAuth2_clientIDQueryName_get = function _OAuth2_clientIDQueryName_get() {
    var _a;
    return (_a = this.options.clientIDQueryName) !== null && _a !== void 0 ? _a : 'client_id';
};
