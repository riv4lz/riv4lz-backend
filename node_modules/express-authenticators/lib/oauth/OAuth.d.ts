import { OAuthSigningMethod } from './oauthUtils';
import type { IOAuthCommon, IPopSession, IStoreSession } from '../OAuthCommon';
declare type IHttpMethod = 'POST' | 'GET';
interface IOAuthRequestOptions {
    method?: IHttpMethod;
    headers?: {
        [key: string]: string;
    };
    body?: {
        [key: string]: string;
    };
    qs?: {
        [key: string]: string;
    };
    oauthHeaders?: {
        [key: string]: string;
    };
}
export interface IOAuthTokenPayload {
    token: string;
    secret: string;
}
export default class OAuth implements IOAuthCommon<IOAuthTokenPayload> {
    #private;
    private config;
    constructor(config: {
        consumerKey: string;
        consumerSecret: string;
        requestTokenUrl: string;
        accessTokenUrl: string;
        callbackUrl: string;
        authorizeUrl: string;
        signingMethod: OAuthSigningMethod;
    });
    authenticate({ store }: IStoreSession): Promise<string>;
    signAndFetch(url: string, options: IOAuthRequestOptions, tokenPayload?: IOAuthTokenPayload): any;
    callback({ pop }: IPopSession, rawQuery: string): Promise<{
        token: string;
        secret: string;
    }>;
}
export {};
