"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.oauthSign = exports.OAuthSigningMethod = exports.getNonce = exports.getTimestamp = void 0;
const crypto_1 = __importStar(require("crypto"));
const OAuthError_1 = __importDefault(require("./OAuthError"));
const r3986_1 = __importDefault(require("r3986"));
const getTimestamp = () => Math.floor(Date.now() / 1000);
exports.getTimestamp = getTimestamp;
const getNonce = () => (0, crypto_1.randomUUID)();
exports.getNonce = getNonce;
var OAuthSigningMethod;
(function (OAuthSigningMethod) {
    OAuthSigningMethod["Hmac"] = "HMAC-SHA1";
    OAuthSigningMethod["Plain"] = "PLAINTEXT";
    OAuthSigningMethod["Rsa"] = "RSA-SHA1";
})(OAuthSigningMethod = exports.OAuthSigningMethod || (exports.OAuthSigningMethod = {}));
const oauthSign = (method, base, consumerSecret, tokenSecret) => {
    switch (method) {
        case OAuthSigningMethod.Hmac:
            consumerSecret = (0, r3986_1.default)(consumerSecret);
            tokenSecret = tokenSecret ? (0, r3986_1.default)(tokenSecret) : '';
            return crypto_1.default.createHmac('sha1', `${consumerSecret}&${tokenSecret}`)
                .update(base)
                .digest('base64');
        case OAuthSigningMethod.Plain:
            consumerSecret = (0, r3986_1.default)(consumerSecret);
            tokenSecret = tokenSecret ? (0, r3986_1.default)(tokenSecret) : '';
            return `${consumerSecret}&${tokenSecret}`;
        case OAuthSigningMethod.Rsa:
            return crypto_1.default.createSign('RSA-SHA1')
                .update(base)
                .sign(consumerSecret, 'base64');
        default:
            throw new OAuthError_1.default(`Unknown OAuth signing method ${method}`);
    }
};
exports.oauthSign = oauthSign;
